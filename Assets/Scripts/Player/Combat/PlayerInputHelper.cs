using UnityEngine;
using UnityEngine.InputSystem;

namespace Player.Combat
{
	public class PlayerInputHelper : MonoBehaviour
	{
		// this is the c# class generated by the input system asset
		private PlayerControls _playerControls;
		
		//this is the class that handles all the combat values that this object receives via the input system events
		private PlayerInput _input;
		
		private InputAction _use;

		private void Awake()
		{
			_playerControls = new PlayerControls();
		}

		private void OnEnable()
		{
			_playerControls.Player.LightAttack.performed += OnLightAttack;
			_playerControls.Player.LightAttack.Enable();
			
			_playerControls.Player.Use.performed += OnUse;
			_playerControls.Player.Use.Enable();

			_playerControls.Player.Block.started += OnBlockStart;
			_playerControls.Player.Block.Enable();
			
			_playerControls.Player.Block.canceled += OnBlockEnd;
			_playerControls.Player.Block.Enable();
		}

		private void OnDisable()
		{
			_playerControls.Player.LightAttack.performed -= OnLightAttack;
			_playerControls.Player.LightAttack.Disable();
			
			_playerControls.Player.Use.performed -= OnUse;
			_playerControls.Player.Use.Disable();
			
			_playerControls.Player.Block.started -= OnBlockStart;
			_playerControls.Player.Block.Enable();
			
			_playerControls.Player.Block.canceled -= OnBlockEnd;
			_playerControls.Player.Block.Enable();
		}


		private void Start() => _input = GetComponent<PlayerInput>();

		private void OnLightAttack(InputAction.CallbackContext context) => _input.OnLightAttackInput();

		private void OnBlockStart(InputAction.CallbackContext obj) => _input.OnStartBlocking();

		private void OnBlockEnd(InputAction.CallbackContext obj) => _input.OnStopBlocking();

		private static void OnUse(InputAction.CallbackContext context) => PlayerInput.InvokeUsePressed();
	}
}